#!/usr/bin/env bash
set -euo pipefail

# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

source "${DOTFILES_ROOT}/system/scripts/logging.sh"

DOTFILES_REPO="https://github.com/powercasgamer/dotfiles.git"
DOTFILES_SYSTEM_DIR="/usr/local/share/dotfiles-system"
SYSTEM_CONFIG_DIR="$DOTFILES_SYSTEM_DIR/system" # Where system configs will be stored
SYSTEM_BIN_SOURCE="$DOTFILES_SYSTEM_DIR/bin"
GLOBAL_BIN_TARGET="/usr/local/bin" # System-wide binary location
TOPICS_DIR="$SYSTEM_CONFIG_DIR/topics"
OPTIONAL_TOPICS_DIR="$SYSTEM_CONFIG_DIR/optional-topics"

displayUsageAndExit() {
  info "dot -- dotfiles management"
  info ""
  info "Usage: dot [options]"
  info ""
  info "Options:"
  info "  -h, --help    Show this help message and exit"
  info "  update        Update dotfiles"
  exit 1
}

# === Clone Dotfiles ===
clone_dotfiles() {
  info "Cloning dotfiles repository..."

  # Function to clean and reclone the repository
  reclone_repository() {
    warning "Resetting dotfiles repository due to conflicts/errors..."
    sudo rm -rf "$DOTFILES_SYSTEM_DIR"
    sudo git clone "$DOTFILES_REPO" "$DOTFILES_SYSTEM_DIR"
    sudo chmod 755 "$DOTFILES_SYSTEM_DIR"
  }

  # First-time clone
  if [[ ! -d "$DOTFILES_SYSTEM_DIR" ]]; then
    if ! sudo git clone "$DOTFILES_REPO" "$DOTFILES_SYSTEM_DIR"; then
      error "Failed to clone dotfiles repository!"
      return 1
    fi
    sudo chmod 755 "$DOTFILES_SYSTEM_DIR"
  else
    # Existing repository - attempt to update
    info "Updating existing dotfiles..."

    # Check if the directory is a git repository
    if ! sudo git -C "$DOTFILES_SYSTEM_DIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      warning "Directory exists but is not a git repository - recreating..."
      reclone_repository
    else
      # Check for uncommitted changes
      if [[ -n $(sudo git -C "$DOTFILES_SYSTEM_DIR" status -s) ]]; then
        warning "Found uncommitted changes - stashing them..."
        if ! sudo git -C "$DOTFILES_SYSTEM_DIR" stash; then
          error "Failed to stash changes - resetting repository..."
          reclone_repository
        fi
      fi

      # Attempt to pull changes
      if ! sudo git -C "$DOTFILES_SYSTEM_DIR" pull; then
        warning "Pull failed due to conflicts - resetting repository..."
        reclone_repository
      fi
    fi
  fi

  # Verify system folder exists
  if [[ ! -d "$DOTFILES_SYSTEM_DIR/system" ]]; then
    error "No 'system' folder found in dotfiles repository!"
    return 1
  fi

  success "Dotfiles repository ready at $DOTFILES_SYSTEM_DIR"
  return 0
}

# === Install System Binaries ===
install_system_binaries() {
  info "Deploying system binaries..."

  # Verify source directory exists
  if [[ ! -d "$SYSTEM_BIN_SOURCE" ]]; then
    warning "No system/bin directory found in dotfiles!"
    return 1
  fi

  # Ensure target directory exists
  sudo mkdir -p "$GLOBAL_BIN_TARGET"

  # Symlink each executable
  for script in "$SYSTEM_BIN_SOURCE"/*; do
    local script_name=$(basename "$script")
    local target="$GLOBAL_BIN_TARGET/$script_name"

    # Skip directories and non-executable files
    [[ ! -f "$script" || ! -x "$script" ]] && continue

    # Backup existing binaries
    if [[ -e "$target" ]]; then
      sudo mv "$target" "${target}.bak"
      info "Backed up existing: $script_name → ${target}.bak"
    fi

    # Create symlink
    sudo ln -sf "$script" "$target"
    sudo chmod +x "$target"
    success "Linked: $script_name → $target"
  done

  # Refresh PATH (for current session)
  hash -r
}

# === Main ===
main() {
  # Verify root
  if [[ "$(id -u)" -ne 0 ]]; then
    warning "This script requires root privileges. Restarting with sudo..."
    exec sudo "$0" "$@"
  fi

  # Handle no arguments case
  if [[ $# -eq 0 ]]; then
    displayUsageAndExit
  fi

  case "${1:-}" in
  "-h" | "--help")
    displayUsageAndExit
    ;;
  "update")
    clone_dotfiles
    install_system_binaries
    ;;
  *)
    error "Invalid option: $1"
    displayUsageAndExit
    ;;
  esac
  shift
}

# Run if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi