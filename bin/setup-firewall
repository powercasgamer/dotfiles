#!/usr/bin/env bash
# setup-firewall - UFW Configuration Manager
set -euo pipefail

# Configuration directories
CONFIG_DIR="/etc/setup-firewall"
IP_LISTS_DIR="$CONFIG_DIR/ip_lists"
mkdir -p "$IP_LISTS_DIR"

# IP List URLs
CLOUDFLARE_IPS_URL="https://www.cloudflare.com/ips-v4"
TCPSHIELD_IPS_URL="https://tcpshield.com/v4/"

# Network Interfaces
PELICAN_IFACE="pelican0"  # Adjust based on your setup

function parse_ports() {
    local input_str="$1"
    local ports=()

    # Handle space-separated ports and ranges
    for item in $input_str; do
        # Check for range syntax (25565-25570 or 25565:25570)
        if [[ "$item" =~ ^([0-9]+)[:-]([0-9]+)$ ]]; then
            local start_port="${BASH_REMATCH[1]}"
            local end_port="${BASH_REMATCH[2]}"

            if (( start_port < end_port && end_port <= 65535 )); then
                for (( port=start_port; port<=end_port; port++ )); do
                    ports+=("$port")
                done
            else
                echo "‚ö†Ô∏è Invalid range: $item (start must be < end and end <= 65535)"
            fi
        elif [[ "$item" =~ ^[0-9]+$ && "$item" -le 65535 ]]; then
            ports+=("$item")
        else
            echo "‚ö†Ô∏è Invalid port or range: $item (must be 0-65535)"
        fi
    done

    # Remove duplicates and sort
    ports=($(printf "%s\n" "${ports[@]}" | sort -nu))
    echo "${ports[@]}"
}

function setup_cloudflare() {
    echo "üå©Ô∏è Configuring Cloudflare firewall rules"

    # Download latest Cloudflare IPs
    curl -s "$CLOUDFLARE_IPS_URL" -o "$IP_LISTS_DIR/cloudflare_ips.txt"

    # Get ports from user
    read -p "Enter ports to open for Cloudflare (space-separated, can use ranges like 25565-25570): " port_input
    PORTS=($(parse_ports "$port_input"))

    if [ ${#PORTS[@]} -eq 0 ]; then
        echo "‚ùå No valid ports provided"
        return
    fi

    # Allow Cloudflare IPs to specified ports
    while read -r ip; do
        for port in "${PORTS[@]}"; do
            sudo ufw allow proto tcp from "$ip" to any port "$port" comment "Cloudflare"
        done
    done < "$IP_LISTS_DIR/cloudflare_ips.txt"

    echo "‚úÖ Cloudflare rules applied for ports: ${PORTS[*]}"
}

function setup_tcpshield() {
    echo "üõ°Ô∏è Configuring TCPShield firewall rules"

    # Download latest TCPShield IPs
    curl -s "$TCPSHIELD_IPS_URL" -o "$IP_LISTS_DIR/tcpshield_ips.txt"

    # Get ports from user
    read -p "Enter ports to open for TCPShield (space-separated, can use ranges like 25565-25570): " port_input
    PORTS=($(parse_ports "$port_input"))

    if [ ${#PORTS[@]} -eq 0 ]; then
        echo "‚ùå No valid ports provided"
        return
    fi

    # Allow TCPShield IPs to specified ports
    while read -r ip; do
        for port in "${PORTS[@]}"; do
            sudo ufw allow proto tcp from "$ip" to any port "$port" comment "TCPShield"
        done
    done < "$IP_LISTS_DIR/tcpshield_ips.txt"

    echo "‚úÖ TCPShield rules applied for ports: ${PORTS[*]}"
}

function setup_common() {
    echo "üîß Configuring common firewall rules"

    # Default deny incoming
    #sudo ufw default deny incoming

    # Allow SSH (with rate limiting)
    sudo ufw limit 22/tcp comment "SSH with rate limiting"

    # Ping
    sudo ufw allow icmp comment "ICMP (ping)"

    echo "‚úÖ Common rules applied (SSH, ICMP)"
}

function setup_pelican() {
    echo "ü¶¢ Configuring Pelican/Pterodactyl firewall rules"

    # Default database ports
    echo "üîπ Applying default database rules for Pelican network..."
    sudo ufw allow in on $PELICAN_IFACE to 172.18.0.1 port 3306 proto tcp comment "Pelican MySQL"
    sudo ufw allow in on $PELICAN_IFACE to 172.18.0.1 port 5432 proto tcp comment "Pelican PostgreSQL"
    sudo ufw allow in on $PELICAN_IFACE to 172.18.0.1 port 6379 proto tcp comment "Pelican Redis"
    sudo ufw allow in on $PELICAN_IFACE to 172.18.0.1 port 27017 proto tcp comment "Pelican MongoDB"

    # Optional additional ports
    read -p "Would you like to whitelist additional ports to 172.18.0.1? [y/N] " add_ports
    if [[ "$add_ports" =~ ^[Yy]$ ]]; then
        while true; do
            read -p "Enter port(s) to whitelist (can be single, space-separated, or range like 25565-25570): " port_input
            [[ "$port_input" == "done" ]] && break

            PORTS=($(parse_ports "$port_input"))

            if [ ${#PORTS[@]} -eq 0 ]; then
                echo "‚ùå No valid ports provided"
                continue
            fi

            for port in "${PORTS[@]}"; do
                sudo ufw allow in on $PELICAN_IFACE to 172.18.0.1 port "$port" proto tcp comment "Pelican Custom Port"
                echo "‚úÖ Whitelisted port $port on $PELICAN_IFACE ‚Üí 172.18.0.1"
            done
        done
    fi

    echo "‚úÖ Pelican firewall configuration complete"
    echo "   Summary of rules for $PELICAN_IFACE:"
    sudo ufw status | grep $PELICAN_IFACE
}

function show_menu() {
    echo "
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù
    "
    echo "1) Cloudflare Setup"
    echo "2) TCPShield Setup"
    echo "3) Common Setup (SSH, HTTP, HTTPS)"
    echo "4) Pelican Setup"
    echo "5) Enable Firewall"
    echo "6) Disable Firewall"
    echo "7) View Rules"
    echo "8) Exit"
}

function main() {
    # Ensure UFW is installed
    if ! command -v ufw &> /dev/null; then
        echo "‚ùå UFW is not installed. Installing now..."
        sudo apt update
        sudo apt install -y ufw
    fi

    while true; do
        clear
        show_menu
        read -p "Select an option (1-8): " choice

        case $choice in
            1) setup_cloudflare ;;
            2) setup_tcpshield ;;
            3) setup_common ;;
            4) setup_pelican ;;
            5) sudo ufw enable ;;
            6) sudo ufw disable ;;
            7) sudo ufw status numbered ;;
            8) exit 0 ;;
            *) echo "Invalid option"; sleep 1 ;;
        esac

        read -p "Press Enter to continue..."
    done
}

main "$@"